from ast import Await
from cgitb import text
from email import message, utils
from email.policy import default
from itertools import count
import logging
from tabnanny import check
from types import NoneType
from typing import final
from xml.dom import ValidationErr
from aiogram import Bot, Dispatcher, executor, types
import time
import datetime
import aiogram
from click import command
from numpy import integer
from DBusers import SQLitedb
from DATETIME import date_time
import random
from ADMINS import ADMcommand
import config
import requests
from bs4 import BeautifulSoup as BS
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import basic_keyboard as inl
import cnfg
import os
import sys

from aiohttp import ContentTypeError

#–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –¥–∞—Ç–∏
dtime = date_time()

#–ø—ñ–¥–∫–ª—é—á–∞—î –ë–î
db = SQLitedb('users.db')

#–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î –∞–¥–º—ñ–Ω—ñ–≤
admbd = ADMcommand('users.db')

#–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –±–æ—Ç–∞
bot = Bot(cnfg.token)

#–î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è  –±–æ—Ç–∞
dp = Dispatcher(bot) 

pogoda_emoji = {'–ú—ñ–Ω–ª–∏–≤–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å, –¥–æ—â, –º–æ–∂–ª–∏–≤—ñ –≥—Ä–æ–∑–∏': '‚õàÔ∏è',
                '–•–º–∞—Ä–Ω–æ –∑ –ø—Ä–æ—è—Å–Ω–µ–Ω–Ω—è–º–∏, –¥–æ—â':'üå¶Ô∏è',
                '–ú—ñ–Ω–ª–∏–≤–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å, –¥–æ—â':'üå¶Ô∏è',
                '–Ø—Å–Ω–æ':'‚òÄÔ∏è',
                '–ù–µ–≤–µ–ª–∏–∫–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å':'üå§Ô∏è',
                '–•–º–∞—Ä–Ω–æ, –¥–æ—â, –≥—Ä–æ–∑–∏':'‚õàÔ∏è',
                '–•–º–∞—Ä–Ω–æ –∑ –ø—Ä–æ—è—Å–Ω–µ–Ω–Ω—è–º–∏':'‚õÖ',
                '–•–º–∞—Ä–Ω–æ –∑ –ø—Ä–æ—è—Å–Ω–µ–Ω–Ω—è–º–∏, –Ω–µ–≤–µ–ª–∏–∫–∏–π –¥–æ—â':'‚õÖüåßÔ∏è',
                '–•–º–∞—Ä–Ω–æ, –Ω–µ–≤–µ–ª–∏–∫–∏–π –¥–æ—â':'üåßÔ∏è',
                '–•–º–∞—Ä–Ω–æ':'‚òÅÔ∏è',
                '–•–º–∞—Ä–Ω–æ, –¥–æ—â':'üåßÔ∏è',
                '–•–º–∞—Ä–Ω–æ –∑ –ø—Ä–æ—è—Å–Ω–µ–Ω–Ω—è–º–∏, –¥–æ—â':'‚õÖüåßÔ∏è',
                '–•–º–∞—Ä–Ω–æ, –¥–æ—â, –º—ñ—Å—Ü—è–º–∏ —Å–∏–ª—å–Ω–∏–π':'üåßÔ∏è',
                '–ú—ñ–Ω–ª–∏–≤–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å':'‚õÖ'
                }

#–ø—Ä–∏ –∫–æ–º–∞–Ω–¥—ñ /start –ø–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î —é–∑–µ—Ä –≤ –ë–î, —è–∫—â–æ –Ω–µ–º–∞—î —Ç–æ –π–æ–≥–æ –¥–æ–¥–∞—î
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    add_time = dtime.time(time.localtime())
    username = message.from_user.username
    firstname = message.from_user.first_name
    if not db.check_nick(user_id):
        db.add_to_db(user_id, username, firstname)
        db.add_datetime(add_time, user_id)
    await bot.send_message(message.chat.id, f'''
üë®‚Äçüîß–ü—Ä–∏–≤—ñ—Ç [{firstname}](tg://user?id={user_id})

ü§ñ–º–µ–Ω–µ –∑–≤–∞—Ç–∏ –ê—Ä–Ω–æ–ª—å–¥ 

üòä–ú–æ—è –≥–æ–ª–æ–≤–Ω–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–∏–≥–ª—è–¥—É–≤–∞—Ç–∏ –∑–∞ –≤–∞—à–∏–º —á–∞—Ç–æ–º!!

üìù–Ω–∞–ø–∏—Å–∞–≤—à–∏ –∫–æ–º–∞–Ω–¥—É `–î–æ–ø–æ–º–æ–≥–∞`, —Ç–∏ –∑–º–æ–∂–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –≤—Å—ñ –º–æ—ó –∫–æ–º–∞–Ω–¥–∏

–©–æ–± –¥–æ–±–∞–≤–∏—Ç–∏ –º–µ–Ω–µ –≤ —Å–≤—ñ–π —á–∞—Ç –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏—â–µ‚¨áÔ∏è''', reply_markup=inl.StartMenu, parse_mode='Markdown')

@dp.message_handler(content_types='text')
async def rp_commands(message: types.Message):
    add_time = dtime.time(time.localtime())
    user_id = message.from_user.id
    username = message.from_user.username
    firstname = message.from_user.first_name
    if not db.check_id_bool(user_id):
        db.add_to_db(user_id, username, firstname)
        db.add_datetime(add_time, user_id)
        
    if db.check_nick(user_id) == None:
        db.nick_user(firstname, user_id)
    try:
        if '–ü–æ–≥–æ–¥–∞ ' in message.text:
            #–ø–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É –ø–æ–≥–æ–¥—É –∑ –º—ñ—Å—Ç–∞
            
            city = message.text[7:]
            split = city.split()
            city_ok = '-'.join(split)
                
            await message.reply(f'üë§–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á [{db.check_nick(message.from_user.id)[0]}](tg://user?id={message.from_user.id})\nüëå–í–∏–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –∑–∞ —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–≥–æ–¥—É:', reply_markup=inl.mainMenu, parse_mode='Markdown')
            
            
            @dp.callback_query_handler(text_contains='weather')
            async def weather_right(query: types.CallbackQuery):
                if query.data == 'one_weather':
                    one_weather_translate = inl.week_one
                        #f'üìÖ–î–∞—Ç–∞: {day_pars} | {month_pars} | {day_name}\nüìù–ú–∞–ª–µ–Ω—å–∫–∏–π –æ–ø–∏—Å: {min_text}\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –≤–µ—Å—å –¥–µ–Ω—å: {t_min} | {t_max}\n‚òÄÔ∏è–†–∞–Ω–æ–∫ 9:00:\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_rano}%\n–ë—É–¥–µ: {mini_weather_rano}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑—Ä–∞–Ω–∫—É: {temperatura_rano}\nüå§Ô∏è–î–µ–Ω—å 15:00:\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_den}%\n–ë—É–¥–µ: {mini_weather_den}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–¥–µ–Ω—å: {temperatura_den}\n‚≠ê–í–µ—á—ñ—Ä 21:00:\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_vechir}%\n–ë—É–¥–µ: {mini_weather_vechir}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–≤–µ—á–µ—Ä—ñ: {temperatura_vechir}\nüåô–ù—ñ—á 3:00:\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_nich}%\n–ë—É–¥–µ: {mini_weather_nich}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω–æ—á—ñ: {temperatura_nich}'
                    
                    await query.message.edit_text(f'–í–∏ –≤–∏–±—Ä–∞–ª–∏: {dtime.transweek(one_weather_translate)}\nüòä–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:\n1)üìï–ë—ñ–ª—å—à–µ - –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó\n2)üìù–ú–µ–Ω—à–µ - –º–µ–Ω—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó', reply_markup=inl.MenuDetailOrShortOne)
                        
                elif query.data == 'two_weather':
                    two_weather_translate = inl.week_two
                    await query.message.edit_text(f'–í–∏ –≤–∏–±—Ä–∞–ª–∏: {dtime.transweek(two_weather_translate)}\nüòä–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:\n1)üìï–ë—ñ–ª—å—à–µ - –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó\n2)üìù–ú–µ–Ω—à–µ - –º–µ–Ω—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó', reply_markup=inl.MenuDetailOrShortTwo)
            
                elif query.data == 'three_weather':
                    three_weather_translate = inl.week_three
                    await query.message.edit_text(f'–í–∏ –≤–∏–±—Ä–∞–ª–∏: {dtime.transweek(three_weather_translate)}\nüòä–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:\n1)üìï–ë—ñ–ª—å—à–µ - –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó\n2)üìù–ú–µ–Ω—à–µ - –º–µ–Ω—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó', reply_markup=inl.MenuDetailOrShortThree)

                elif query.data == 'four_weather':
                    four_weather_translate = inl.week_four
                    await query.message.edit_text(f'–í–∏ –≤–∏–±—Ä–∞–ª–∏: {dtime.transweek(four_weather_translate)}\nüòä–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:\n1)üìï–ë—ñ–ª—å—à–µ - –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó\n2)üìù–ú–µ–Ω—à–µ - –º–µ–Ω—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó', reply_markup=inl.MenuDetailOrShortFour)
                    
                elif query.data == 'five_weather':
                    five_weather_translate = inl.week_five
                    await query.message.edit_text(f'–í–∏ –≤–∏–±—Ä–∞–ª–∏: {dtime.transweek(five_weather_translate)}\nüòä–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:\n1)üìï–ë—ñ–ª—å—à–µ - –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó\n2)üìù–ú–µ–Ω—à–µ - –º–µ–Ω—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó', reply_markup=inl.MenuDetailOrShortFive)

                elif query.data == 'today_weather':
                    today_weather_translate = datetime.date.today().strftime('%A')
                    await query.message.edit_text(f'–í–∏ –≤–∏–±—Ä–∞–ª–∏: –°—å–æ–≥–æ–¥–Ω—ñ ({dtime.transweek(today_weather_translate)})\nüòä–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:\n1)üìï–ë—ñ–ª—å—à–µ - –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó\n2)üìù–ú–µ–Ω—à–µ - –º–µ–Ω—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó', reply_markup=inl.MenuDetailOrShortToday)

                if query.data == 'Short_weather_one':
                    today = datetime.date.today()
                    zavtra = today + datetime.timedelta(hours=3,days=1)
                    dt_zavtra = zavtra.strftime('%Y-%m-%d')
                    url = 'https://ua.sinoptik.ua/–ø–æ–≥–æ–¥–∞-' + city_ok + '/' + dt_zavtra
                    r = requests.get(url)
                    html = BS(r.content, 'lxml')
                    for el in html.select('#content'):
                        t_min = el.select('.temperature .min')[1].text
                        t_max = el.select('.temperature .max')[1].text
                        min_text = el.select('.weatherIco')[1]['title']
                        day_pars = el.select('.day-link')[1].text
                        month_pars = el.select('.date')[1].text
                        day_name = el.select('.month')[1].text
                        dosch_rano = el.select('tr .p4')[7].text
                        dosch_den = el.select('tr .p6')[7].text
                        dosch_vechir = el.select('tr .p8')[7].text
                        dosch_nich = el.select('tr .p2')[7].text
                        temperatura_rano = el.select('.temperature .p4')[0].text
                        temperatura_den = el.select('.temperature .p6')[0].text
                        temperatura_vechir = el.select('.temperature .p8')[0].text
                        temperatura_nich = el.select('.temperature .p2')[0].text
                        dosch_rano = dosch_rano.replace('-', '0')
                        dosch_den = dosch_den.replace('-', '0')
                        dosch_vechir = dosch_vechir.replace('-', '0')
                        dosch_nich = dosch_nich.replace('-', '0')
                        mini_weather_rano = el.select('.img .p4 .weatherIco')[0]['title']
                        mini_weather_den = el.select('.img .p6 .weatherIco')[0]['title']
                        mini_weather_vechir = el.select('.img .p8 .weatherIco')[0]['title']
                        mini_weather_nich = el.select('.img .p2 .weatherIco')[0]['title']
                        
                    await query.message.edit_text(f'üìÖ–î–∞—Ç–∞: {day_pars} | {month_pars} | {day_name}\nüìù–ú–∞–ª–µ–Ω—å–∫–∏–π –æ–ø–∏—Å: {min_text}\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –≤–µ—Å—å –¥–µ–Ω—å: {t_min} | {t_max}\n*‚òÄÔ∏è–†–∞–Ω–æ–∫ 9:00*:\n–ë—É–¥–µ: {mini_weather_rano} {pogoda_emoji[mini_weather_rano]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑—Ä–∞–Ω–∫—É: {temperatura_rano}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_rano}%\n*üå§Ô∏è–î–µ–Ω—å 15:00*:\n–ë—É–¥–µ: {mini_weather_den} {pogoda_emoji[mini_weather_den]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–¥–µ–Ω—å: {temperatura_den}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_den}%\n*‚≠ê–í–µ—á—ñ—Ä 21:00*:\n–ë—É–¥–µ: {mini_weather_vechir} {pogoda_emoji[mini_weather_vechir]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–≤–µ—á–µ—Ä—ñ: {temperatura_vechir}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_vechir}%\n*üåô–ù—ñ—á 3:00*:\n–ë—É–¥–µ: {mini_weather_nich} {pogoda_emoji[mini_weather_nich]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω–æ—á—ñ: {temperatura_nich}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_nich}%', reply_markup=inl.mainMenuNazad, parse_mode='Markdown')
                
                elif query.data == 'Detail_weather_one':
                    today = datetime.date.today()
                    zavtra = today + datetime.timedelta(hours=3,days=1)
                    dt_zavtra = zavtra.strftime('%Y-%m-%d')
                    url = 'https://ua.sinoptik.ua/–ø–æ–≥–æ–¥–∞-' + city_ok + '/' + dt_zavtra
                    r = requests.get(url)
                    html = BS(r.content, 'lxml')
                    for el in html.select('#content'):
                        t_min = el.select('.temperature .min')[1].text
                        t_max = el.select('.temperature .max')[1].text
                        min_text = el.select('.weatherIco')[1]['title']
                        day_pars = el.select('.day-link')[1].text
                        month_pars = el.select('.date')[1].text
                        day_name = el.select('.month')[1].text
                        dosch_rano = el.select('tr .p4')[7].text
                        dosch_den = el.select('tr .p6')[7].text
                        dosch_vechir = el.select('tr .p8')[7].text
                        dosch_nich = el.select('tr .p2')[7].text
                        temperatura_rano = el.select('.temperature .p4')[0].text
                        temperatura_den = el.select('.temperature .p6')[0].text
                        temperatura_vechir = el.select('.temperature .p8')[0].text
                        temperatura_nich = el.select('.temperature .p2')[0].text
                        dosch_rano = dosch_rano.replace('-', '0')
                        dosch_den = dosch_den.replace('-', '0')
                        dosch_vechir = dosch_vechir.replace('-', '0')
                        dosch_nich = dosch_nich.replace('-', '0')
                        mini_weather_rano = el.select('.img .p4 .weatherIco')[0]['title']
                        mini_weather_den = el.select('.img .p6 .weatherIco')[0]['title']
                        mini_weather_vechir = el.select('.img .p8 .weatherIco')[0]['title']
                        mini_weather_nich = el.select('.img .p2 .weatherIco')[0]['title']
                        witer_rano = el.select('.gray .p4')[2].text
                        witer_den = el.select('.gray .p6')[2].text
                        witer_vechir = el.select('.gray .p8')[2].text
                        witer_nich = el.select('.gray .p2')[2].text
                        vologist_rano = el.select('tr .p4')[5].text
                        vologist_den = el.select('tr .p6')[5].text
                        vologist_vechir = el.select('tr .p8')[5].text
                        vologist_nich = el.select('tr .p2')[5].text
                        full_description = el.select('.wDescription .description')[0].text
                        
                        
                    await query.message.edit_text(f'üìÖ–î–∞—Ç–∞: {day_pars} | {month_pars} | {day_name}\nüìù–ú–∞–ª–µ–Ω—å–∫–∏–π –æ–ø–∏—Å: {min_text}\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –≤–µ—Å—å –¥–µ–Ω—å: {t_min} | {t_max}\n*‚òÄÔ∏è–†–∞–Ω–æ–∫ 9:00*:\n–ë—É–¥–µ: {mini_weather_rano} {pogoda_emoji[mini_weather_rano]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑—Ä–∞–Ω–∫—É: {temperatura_rano}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_rano}%\n–í—ñ—Ç–µ—Ä | {witer_rano} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_rano}%\n*üå§Ô∏è–î–µ–Ω—å 15:00*:\n–ë—É–¥–µ: {mini_weather_den} {pogoda_emoji[mini_weather_den]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–¥–µ–Ω—å: {temperatura_den}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_den}%\n–í—ñ—Ç–µ—Ä | {witer_den} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_den}%\n*‚≠ê–í–µ—á—ñ—Ä 21:00*:\n–ë—É–¥–µ: {mini_weather_vechir} {pogoda_emoji[mini_weather_vechir]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–≤–µ—á–µ—Ä—ñ: {temperatura_vechir}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_vechir}%\n–í—ñ—Ç–µ—Ä | {witer_vechir} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_vechir}%\n*üåô–ù—ñ—á 3:00*:\n–ë—É–¥–µ: {mini_weather_nich} {pogoda_emoji[mini_weather_nich]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω–æ—á—ñ: {temperatura_nich}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_nich}%\n–í—ñ—Ç–µ—Ä | {witer_nich} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_nich}%\n‚≠ê–ü–æ–≤–Ω–∏–π –æ–ø–∏—Å:\n{full_description[2:]}', reply_markup=inl.mainMenuNazad, parse_mode='Markdown')

                if query.data == 'Short_weather_two':
                    today = datetime.date.today()
                    pisla_zavtra = today + datetime.timedelta(hours=3,days=2)
                    dt_zavtra = pisla_zavtra.strftime('%Y-%m-%d')
                    url = 'https://ua.sinoptik.ua/–ø–æ–≥–æ–¥–∞-' + city_ok + '/' + dt_zavtra
                    r = requests.get(url)
                    html = BS(r.content, 'lxml')
                    check_number_pogoda = html.find('div', id='content').find('div', id='leftCol').find('div', id='mainContentBlock').find('div', id='blockDays').find('div', attrs={'class': 'tabsContent'}).find('div', attrs={'class': 'tabsContentInner'}).find('div', attrs={'class': 'Tab', 'id':'bd3c'}).find('div', attrs={'class': 'wMain clearfix'}).find('div', attrs={'class': 'rSide'}).find('table', attrs={'class': 'weatherDetails'}).find('tbody').find('tr', attrs={'class': 'temperature'}).find('td', attrs={'class': 'p5'})
                    if check_number_pogoda == None:
                        for el in html.select('#content'):
                            t_min = el.select('.temperature .min')[2].text
                            t_max = el.select('.temperature .max')[2].text
                            min_text = el.select('.weatherIco')[2]['title']
                            day_pars = el.select('.day-link')[2].text
                            month_pars = el.select('.date')[2].text
                            day_name = el.select('.month')[2].text
                            dosch_rano = el.select('tr .p2')[7].text
                            dosch_den = el.select('tr .p3')[7].text
                            dosch_vechir = el.select('tr .p4')[7].text
                            dosch_nich = el.select('tr .p1')[7].text
                            temperatura_rano = el.select('.temperature .p2')[0].text
                            temperatura_den = el.select('.temperature .p3')[0].text
                            temperatura_vechir = el.select('.temperature .p4')[0].text
                            temperatura_nich = el.select('.temperature .p1')[0].text
                            dosch_rano = dosch_rano.replace('-', '0')
                            dosch_den = dosch_den.replace('-', '0')
                            dosch_vechir = dosch_vechir.replace('-', '0')
                            dosch_nich = dosch_nich.replace('-', '0')
                            mini_weather_rano = el.select('.img .p2 .weatherIco')[0]['title']
                            mini_weather_den = el.select('.img .p3 .weatherIco')[0]['title']
                            mini_weather_vechir = el.select('.img .p4 .weatherIco')[0]['title']
                            mini_weather_nich = el.select('.img .p1 .weatherIco')[0]['title']
                    
                        await query.message.edit_text(f'üìÖ–î–∞—Ç–∞: {day_pars} | {month_pars} | {day_name}\nüìù–ú–∞–ª–µ–Ω—å–∫–∏–π –æ–ø–∏—Å: {min_text}\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –≤–µ—Å—å –¥–µ–Ω—å: {t_min} | {t_max}\n*‚òÄÔ∏è–†–∞–Ω–æ–∫ 9:00*:\n–ë—É–¥–µ: {mini_weather_rano} {pogoda_emoji[mini_weather_rano]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑—Ä–∞–Ω–∫—É: {temperatura_rano}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_rano}%\n*üå§Ô∏è–î–µ–Ω—å 15:00*:\n–ë—É–¥–µ: {mini_weather_den} {pogoda_emoji[mini_weather_den]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–¥–µ–Ω—å: {temperatura_den}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_den}%\n*‚≠ê–í–µ—á—ñ—Ä 21:00*:\n–ë—É–¥–µ: {mini_weather_vechir} {pogoda_emoji[mini_weather_vechir]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–≤–µ—á–µ—Ä—ñ: {temperatura_vechir}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_vechir}%\n*üåô–ù—ñ—á 3:00*:\n–ë—É–¥–µ: {mini_weather_nich} {pogoda_emoji[mini_weather_nich]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω–æ—á—ñ: {temperatura_nich}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_nich}%', reply_markup=inl.mainMenuNazad, parse_mode='Markdown')
                    else:
                        today = datetime.date.today()
                        pisla_zavtra = today + datetime.timedelta(hours=3,days=2)
                        dt_zavtra = pisla_zavtra.strftime('%Y-%m-%d')
                        url = 'https://ua.sinoptik.ua/–ø–æ–≥–æ–¥–∞-' + city_ok + '/' + dt_zavtra
                        r = requests.get(url)
                        html = BS(r.content, 'lxml')
                        for el in html.select('#content'):
                            t_min = el.select('.temperature .min')[2].text
                            t_max = el.select('.temperature .max')[2].text
                            min_text = el.select('.weatherIco')[2]['title']
                            day_pars = el.select('.day-link')[2].text
                            month_pars = el.select('.date')[2].text
                            day_name = el.select('.month')[2].text
                            dosch_rano = el.select('tr .p4')[7].text
                            dosch_den = el.select('tr .p6')[7].text
                            dosch_vechir = el.select('tr .p8')[7].text
                            dosch_nich = el.select('tr .p2')[7].text
                            temperatura_rano = el.select('.temperature .p4')[0].text
                            temperatura_den = el.select('.temperature .p6')[0].text
                            temperatura_vechir = el.select('.temperature .p8')[0].text
                            temperatura_nich = el.select('.temperature .p2')[0].text
                            dosch_rano = dosch_rano.replace('-', '0')
                            dosch_den = dosch_den.replace('-', '0')
                            dosch_vechir = dosch_vechir.replace('-', '0')
                            dosch_nich = dosch_nich.replace('-', '0')
                            mini_weather_rano = el.select('.img .p4 .weatherIco')[0]['title']
                            mini_weather_den = el.select('.img .p6 .weatherIco')[0]['title']
                            mini_weather_vechir = el.select('.img .p8 .weatherIco')[0]['title']
                            mini_weather_nich = el.select('.img .p2 .weatherIco')[0]['title']
                    
                        await query.message.edit_text(f'üìÖ–î–∞—Ç–∞: {day_pars} | {month_pars} | {day_name}\nüìù–ú–∞–ª–µ–Ω—å–∫–∏–π –æ–ø–∏—Å: {min_text}\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –≤–µ—Å—å –¥–µ–Ω—å: {t_min} | {t_max}\n*‚òÄÔ∏è–†–∞–Ω–æ–∫ 9:00*:\n–ë—É–¥–µ: {mini_weather_rano} {pogoda_emoji[mini_weather_rano]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑—Ä–∞–Ω–∫—É: {temperatura_rano}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_rano}%\n*üå§Ô∏è–î–µ–Ω—å 15:00*:\n–ë—É–¥–µ: {mini_weather_den} {pogoda_emoji[mini_weather_den]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–¥–µ–Ω—å: {temperatura_den}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_den}%\n*‚≠ê–í–µ—á—ñ—Ä 21:00*:\n–ë—É–¥–µ: {mini_weather_vechir} {pogoda_emoji[mini_weather_vechir]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–≤–µ—á–µ—Ä—ñ: {temperatura_vechir}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_vechir}%\n*üåô–ù—ñ—á 3:00*:\n–ë—É–¥–µ: {mini_weather_nich} {pogoda_emoji[mini_weather_nich]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω–æ—á—ñ: {temperatura_nich}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_nich}%', reply_markup=inl.mainMenuNazad, parse_mode='Markdown')
                
                elif query.data == 'Detail_weather_two':
                    today = datetime.date.today()
                    pisla_zavtra = today + datetime.timedelta(hours=3,days=2)
                    dt_zavtra = pisla_zavtra.strftime('%Y-%m-%d')
                    url = 'https://ua.sinoptik.ua/–ø–æ–≥–æ–¥–∞-' + city_ok + '/' + dt_zavtra
                    r = requests.get(url)
                    html = BS(r.content, 'lxml')
                    check_number_pogoda = html.find('div', id='content').find('div', id='leftCol').find('div', id='mainContentBlock').find('div', id='blockDays').find('div', attrs={'class': 'tabsContent'}).find('div', attrs={'class': 'tabsContentInner'}).find('div', attrs={'class': 'Tab', 'id':'bd3c'}).find('div', attrs={'class': 'wMain clearfix'}).find('div', attrs={'class': 'rSide'}).find('table', attrs={'class': 'weatherDetails'}).find('tbody').find('tr', attrs={'class': 'temperature'}).find('td', attrs={'class': 'p5'})
                    if check_number_pogoda == None:
                        for el in html.select('#content'):
                            t_min = el.select('.temperature .min')[2].text
                            t_max = el.select('.temperature .max')[2].text
                            min_text = el.select('.weatherIco')[2]['title']
                            day_pars = el.select('.day-link')[2].text
                            month_pars = el.select('.date')[2].text
                            day_name = el.select('.month')[2].text
                            dosch_rano = el.select('tr .p2')[7].text
                            dosch_den = el.select('tr .p3')[7].text
                            dosch_vechir = el.select('tr .p4')[7].text
                            dosch_nich = el.select('tr .p1')[7].text
                            temperatura_rano = el.select('.temperature .p2')[0].text
                            temperatura_den = el.select('.temperature .p3')[0].text
                            temperatura_vechir = el.select('.temperature .p4')[0].text
                            temperatura_nich = el.select('.temperature .p1')[0].text
                            dosch_rano = dosch_rano.replace('-', '0')
                            dosch_den = dosch_den.replace('-', '0')
                            dosch_vechir = dosch_vechir.replace('-', '0')
                            dosch_nich = dosch_nich.replace('-', '0')
                            mini_weather_rano = el.select('.img .p2 .weatherIco')[0]['title']
                            mini_weather_den = el.select('.img .p3 .weatherIco')[0]['title']
                            mini_weather_vechir = el.select('.img .p4 .weatherIco')[0]['title']
                            mini_weather_nich = el.select('.img .p1 .weatherIco')[0]['title']
                            witer_rano = el.select('.gray .p2')[2].text
                            witer_den = el.select('.gray .p3')[2].text
                            witer_vechir = el.select('.gray .p4')[2].text
                            witer_nich = el.select('.gray .p1')[2].text
                            vologist_rano = el.select('tr .p2')[5].text
                            vologist_den = el.select('tr .p3')[5].text
                            vologist_vechir = el.select('tr .p4')[5].text
                            vologist_nich = el.select('tr .p1')[5].text
                            full_description = el.select('.wDescription .description')[0].text
                    
                        await query.message.edit_text(f'üìÖ–î–∞—Ç–∞: {day_pars} | {month_pars} | {day_name}\nüìù–ú–∞–ª–µ–Ω—å–∫–∏–π –æ–ø–∏—Å: {min_text}\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –≤–µ—Å—å –¥–µ–Ω—å: {t_min} | {t_max}\n*‚òÄÔ∏è–†–∞–Ω–æ–∫ 9:00*:\n–ë—É–¥–µ: {mini_weather_rano} {pogoda_emoji[mini_weather_rano]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑—Ä–∞–Ω–∫—É: {temperatura_rano}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_rano}%\n–í—ñ—Ç–µ—Ä | {witer_rano} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_rano}%\n*üå§Ô∏è–î–µ–Ω—å 15:00*:\n–ë—É–¥–µ: {mini_weather_den} {pogoda_emoji[mini_weather_den]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–¥–µ–Ω—å: {temperatura_den}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_den}%\n–í—ñ—Ç–µ—Ä | {witer_den} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_den}%\n*‚≠ê–í–µ—á—ñ—Ä 21:00*:\n–ë—É–¥–µ: {mini_weather_vechir} {pogoda_emoji[mini_weather_vechir]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–≤–µ—á–µ—Ä—ñ: {temperatura_vechir}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_vechir}%\n–í—ñ—Ç–µ—Ä | {witer_vechir} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_vechir}%\n*üåô–ù—ñ—á 3:00*:\n–ë—É–¥–µ: {mini_weather_nich} {pogoda_emoji[mini_weather_nich]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω–æ—á—ñ: {temperatura_nich}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_nich}%\n–í—ñ—Ç–µ—Ä | {witer_nich} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_nich}%\n‚≠ê–ü–æ–≤–Ω–∏–π –æ–ø–∏—Å:\n{full_description[2:]}', reply_markup=inl.mainMenuNazad, parse_mode='Markdown')
                    else:
                        today = datetime.date.today()
                        pisla_zavtra = today + datetime.timedelta(hours=3,days=2)
                        dt_zavtra = pisla_zavtra.strftime('%Y-%m-%d')
                        url = 'https://ua.sinoptik.ua/–ø–æ–≥–æ–¥–∞-' + city_ok + '/' + dt_zavtra
                        r = requests.get(url)
                        html = BS(r.content, 'lxml')
                        for el in html.select('#content'):
                            t_min = el.select('.temperature .min')[2].text
                            t_max = el.select('.temperature .max')[2].text
                            min_text = el.select('.weatherIco')[2]['title']
                            day_pars = el.select('.day-link')[2].text
                            month_pars = el.select('.date')[2].text
                            day_name = el.select('.month')[2].text
                            dosch_rano = el.select('tr .p4')[7].text
                            dosch_den = el.select('tr .p6')[7].text
                            dosch_vechir = el.select('tr .p8')[7].text
                            dosch_nich = el.select('tr .p2')[7].text
                            temperatura_rano = el.select('.temperature .p4')[0].text
                            temperatura_den = el.select('.temperature .p6')[0].text
                            temperatura_vechir = el.select('.temperature .p8')[0].text
                            temperatura_nich = el.select('.temperature .p2')[0].text
                            dosch_rano = dosch_rano.replace('-', '0')
                            dosch_den = dosch_den.replace('-', '0')
                            dosch_vechir = dosch_vechir.replace('-', '0')
                            dosch_nich = dosch_nich.replace('-', '0')
                            mini_weather_rano = el.select('.img .p4 .weatherIco')[0]['title']
                            mini_weather_den = el.select('.img .p6 .weatherIco')[0]['title']
                            mini_weather_vechir = el.select('.img .p8 .weatherIco')[0]['title']
                            mini_weather_nich = el.select('.img .p2 .weatherIco')[0]['title']
                            witer_rano = el.select('.gray .p4')[2].text
                            witer_den = el.select('.gray .p6')[2].text
                            witer_vechir = el.select('.gray .p8')[2].text
                            witer_nich = el.select('.gray .p2')[2].text
                            vologist_rano = el.select('tr .p4')[5].text
                            vologist_den = el.select('tr .p6')[5].text
                            vologist_vechir = el.select('tr .p8')[5].text
                            vologist_nich = el.select('tr .p2')[5].text
                            full_description = el.select('.wDescription .description')[0].text
                    
                        await query.message.edit_text(f'üìÖ–î–∞—Ç–∞: {day_pars} | {month_pars} | {day_name}\nüìù–ú–∞–ª–µ–Ω—å–∫–∏–π –æ–ø–∏—Å: {min_text}\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –≤–µ—Å—å –¥–µ–Ω—å: {t_min} | {t_max}\n*‚òÄÔ∏è–†–∞–Ω–æ–∫ 9:00*:\n–ë—É–¥–µ: {mini_weather_rano} {pogoda_emoji[mini_weather_rano]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑—Ä–∞–Ω–∫—É: {temperatura_rano}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_rano}%\n–í—ñ—Ç–µ—Ä | {witer_rano} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_rano}%\n*üå§Ô∏è–î–µ–Ω—å 15:00*:\n–ë—É–¥–µ: {mini_weather_den} {pogoda_emoji[mini_weather_den]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–¥–µ–Ω—å: {temperatura_den}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_den}%\n–í—ñ—Ç–µ—Ä | {witer_den} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_den}%\n*‚≠ê–í–µ—á—ñ—Ä 21:00*:\n–ë—É–¥–µ: {mini_weather_vechir} {pogoda_emoji[mini_weather_vechir]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–≤–µ—á–µ—Ä—ñ: {temperatura_vechir}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_vechir}%\n–í—ñ—Ç–µ—Ä | {witer_vechir} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_vechir}%\n*üåô–ù—ñ—á 3:00*:\n–ë—É–¥–µ: {mini_weather_nich} {pogoda_emoji[mini_weather_nich]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω–æ—á—ñ: {temperatura_nich}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_nich}%\n–í—ñ—Ç–µ—Ä | {witer_nich} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_nich}%\n‚≠ê–ü–æ–≤–Ω–∏–π –æ–ø–∏—Å:\n{full_description[2:]}', reply_markup=inl.mainMenuNazad, parse_mode='Markdown')
                
                if query.data == 'Short_weather_three':
                    today = datetime.date.today()
                    zavtra = today + datetime.timedelta(hours=3,days=3)
                    dt_zavtra = zavtra.strftime('%Y-%m-%d')
                    url = 'https://ua.sinoptik.ua/–ø–æ–≥–æ–¥–∞-' + city_ok + '/' + dt_zavtra
                    r = requests.get(url)
                    html = BS(r.content, 'lxml')
                    for el in html.select('#content'):
                        t_min = el.select('.temperature .min')[3].text
                        t_max = el.select('.temperature .max')[3].text
                        min_text = el.select('.weatherIco')[3]['title']
                        day_pars = el.select('.day-link')[3].text
                        month_pars = el.select('.date')[3].text
                        day_name = el.select('.month')[3].text
                        dosch_rano = el.select('tr .p2')[7].text
                        dosch_den = el.select('tr .p3')[7].text
                        dosch_vechir = el.select('tr .p4')[7].text
                        dosch_nich = el.select('tr .p1')[7].text
                        temperatura_rano = el.select('.temperature .p2')[0].text
                        temperatura_den = el.select('.temperature .p3')[0].text
                        temperatura_vechir = el.select('.temperature .p4')[0].text
                        temperatura_nich = el.select('.temperature .p1')[0].text
                        dosch_rano = dosch_rano.replace('-', '0')
                        dosch_den = dosch_den.replace('-', '0')
                        dosch_vechir = dosch_vechir.replace('-', '0')
                        dosch_nich = dosch_nich.replace('-', '0')
                        mini_weather_rano = el.select('.img .p2 .weatherIco')[0]['title']
                        mini_weather_den = el.select('.img .p3 .weatherIco')[0]['title']
                        mini_weather_vechir = el.select('.img .p4 .weatherIco')[0]['title']
                        mini_weather_nich = el.select('.img .p1 .weatherIco')[0]['title']
                    
                    await query.message.edit_text(f'üìÖ–î–∞—Ç–∞: {day_pars} | {month_pars} | {day_name}\nüìù–ú–∞–ª–µ–Ω—å–∫–∏–π –æ–ø–∏—Å: {min_text}\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –≤–µ—Å—å –¥–µ–Ω—å: {t_min} | {t_max}\n*‚òÄÔ∏è–†–∞–Ω–æ–∫ 9:00*:\n–ë—É–¥–µ: {mini_weather_rano} {pogoda_emoji[mini_weather_rano]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑—Ä–∞–Ω–∫—É: {temperatura_rano}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_rano}%\n*üå§Ô∏è–î–µ–Ω—å 15:00*:\n–ë—É–¥–µ: {mini_weather_den} {pogoda_emoji[mini_weather_den]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–¥–µ–Ω—å: {temperatura_den}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_den}%\n*‚≠ê–í–µ—á—ñ—Ä 21:00*:\n–ë—É–¥–µ: {mini_weather_vechir} {pogoda_emoji[mini_weather_vechir]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–≤–µ—á–µ—Ä—ñ: {temperatura_vechir}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_vechir}%\n*üåô–ù—ñ—á 3:00*:\n–ë—É–¥–µ: {mini_weather_nich} {pogoda_emoji[mini_weather_nich]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω–æ—á—ñ: {temperatura_nich}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_nich}%', reply_markup=inl.mainMenuNazad, parse_mode='Markdown')

                elif query.data == 'Detail_weather_three':
                    today = datetime.date.today()
                    zavtra = today + datetime.timedelta(hours=3,days=3)
                    dt_zavtra = zavtra.strftime('%Y-%m-%d')
                    url = 'https://ua.sinoptik.ua/–ø–æ–≥–æ–¥–∞-' + city_ok + '/' + dt_zavtra
                    r = requests.get(url)
                    html = BS(r.content, 'lxml')
                    for el in html.select('#content'):
                        t_min = el.select('.temperature .min')[3].text
                        t_max = el.select('.temperature .max')[3].text
                        min_text = el.select('.weatherIco')[3]['title']
                        day_pars = el.select('.day-link')[3].text
                        month_pars = el.select('.date')[3].text
                        day_name = el.select('.month')[3].text
                        dosch_rano = el.select('tr .p2')[7].text
                        dosch_den = el.select('tr .p3')[7].text
                        dosch_vechir = el.select('tr .p4')[7].text
                        dosch_nich = el.select('tr .p1')[7].text
                        temperatura_rano = el.select('.temperature .p2')[0].text
                        temperatura_den = el.select('.temperature .p3')[0].text
                        temperatura_vechir = el.select('.temperature .p4')[0].text
                        temperatura_nich = el.select('.temperature .p1')[0].text
                        dosch_rano = dosch_rano.replace('-', '0')
                        dosch_den = dosch_den.replace('-', '0')
                        dosch_vechir = dosch_vechir.replace('-', '0')
                        dosch_nich = dosch_nich.replace('-', '0')
                        mini_weather_rano = el.select('.img .p2 .weatherIco')[0]['title']
                        mini_weather_den = el.select('.img .p3 .weatherIco')[0]['title']
                        mini_weather_vechir = el.select('.img .p4 .weatherIco')[0]['title']
                        mini_weather_nich = el.select('.img .p1 .weatherIco')[0]['title']
                        witer_rano = el.select('.gray .p2')[2].text
                        witer_den = el.select('.gray .p3')[2].text
                        witer_vechir = el.select('.gray .p4')[2].text
                        witer_nich = el.select('.gray .p1')[2].text
                        vologist_rano = el.select('tr .p2')[5].text
                        vologist_den = el.select('tr .p3')[5].text
                        vologist_vechir = el.select('tr .p4')[5].text
                        vologist_nich = el.select('tr .p1')[5].text
                        full_description = el.select('.wDescription .description')[0].text
                    
                    await query.message.edit_text(f'üìÖ–î–∞—Ç–∞: {day_pars} | {month_pars} | {day_name}\nüìù–ú–∞–ª–µ–Ω—å–∫–∏–π –æ–ø–∏—Å: {min_text}\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –≤–µ—Å—å –¥–µ–Ω—å: {t_min} | {t_max}\n*‚òÄÔ∏è–†–∞–Ω–æ–∫ 9:00*:\n–ë—É–¥–µ: {mini_weather_rano} {pogoda_emoji[mini_weather_rano]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑—Ä–∞–Ω–∫—É: {temperatura_rano}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_rano}%\n–í—ñ—Ç–µ—Ä | {witer_rano} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_rano}%\n*üå§Ô∏è–î–µ–Ω—å 15:00*:\n–ë—É–¥–µ: {mini_weather_den} {pogoda_emoji[mini_weather_den]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–¥–µ–Ω—å: {temperatura_den}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_den}%\n–í—ñ—Ç–µ—Ä | {witer_den} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_den}%\n*‚≠ê–í–µ—á—ñ—Ä 21:00*:\n–ë—É–¥–µ: {mini_weather_vechir} {pogoda_emoji[mini_weather_vechir]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–≤–µ—á–µ—Ä—ñ: {temperatura_vechir}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_vechir}%\n–í—ñ—Ç–µ—Ä | {witer_vechir} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_vechir}%\n*üåô–ù—ñ—á 3:00*:\n–ë—É–¥–µ: {mini_weather_nich} {pogoda_emoji[mini_weather_nich]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω–æ—á—ñ: {temperatura_nich}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_nich}%\n–í—ñ—Ç–µ—Ä | {witer_nich} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_nich}%\n‚≠ê–ü–æ–≤–Ω–∏–π –æ–ø–∏—Å:\n{full_description[2:]}', reply_markup=inl.mainMenuNazad, parse_mode='Markdown')
                    
                if query.data == 'Short_weather_four':
                    today = datetime.date.today()
                    zavtra = today + datetime.timedelta(hours=3,days=4)
                    dt_zavtra = zavtra.strftime('%Y-%m-%d')
                    url = 'https://ua.sinoptik.ua/–ø–æ–≥–æ–¥–∞-' + city_ok + '/' + dt_zavtra
                    r = requests.get(url)
                    html = BS(r.content, 'lxml')
                    for el in html.select('#content'):
                        t_min = el.select('.temperature .min')[4].text
                        t_max = el.select('.temperature .max')[4].text
                        min_text = el.select('.weatherIco')[4]['title']
                        day_pars = el.select('.day-link')[4].text
                        month_pars = el.select('.date')[4].text
                        day_name = el.select('.month')[4].text
                        dosch_rano = el.select('tr .p2')[7].text
                        dosch_den = el.select('tr .p3')[7].text
                        dosch_vechir = el.select('tr .p4')[7].text
                        dosch_nich = el.select('tr .p1')[7].text
                        temperatura_rano = el.select('.temperature .p2')[0].text
                        temperatura_den = el.select('.temperature .p3')[0].text
                        temperatura_vechir = el.select('.temperature .p4')[0].text
                        temperatura_nich = el.select('.temperature .p1')[0].text
                        dosch_rano = dosch_rano.replace('-', '0')
                        dosch_den = dosch_den.replace('-', '0')
                        dosch_vechir = dosch_vechir.replace('-', '0')
                        dosch_nich = dosch_nich.replace('-', '0')
                        mini_weather_rano = el.select('.img .p2 .weatherIco')[0]['title']
                        mini_weather_den = el.select('.img .p3 .weatherIco')[0]['title']
                        mini_weather_vechir = el.select('.img .p4 .weatherIco')[0]['title']
                        mini_weather_nich = el.select('.img .p1 .weatherIco')[0]['title']

                    await query.message.edit_text(f'üìÖ–î–∞—Ç–∞: {day_pars} | {month_pars} | {day_name}\nüìù–ú–∞–ª–µ–Ω—å–∫–∏–π –æ–ø–∏—Å: {min_text}\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –≤–µ—Å—å –¥–µ–Ω—å: {t_min} | {t_max}\n*‚òÄÔ∏è–†–∞–Ω–æ–∫ 9:00*:\n–ë—É–¥–µ: {mini_weather_rano} {pogoda_emoji[mini_weather_rano]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑—Ä–∞–Ω–∫—É: {temperatura_rano}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_rano}%\n*üå§Ô∏è–î–µ–Ω—å 15:00*:\n–ë—É–¥–µ: {mini_weather_den} {pogoda_emoji[mini_weather_den]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–¥–µ–Ω—å: {temperatura_den}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_den}%\n*‚≠ê–í–µ—á—ñ—Ä 21:00*:\n–ë—É–¥–µ: {mini_weather_vechir} {pogoda_emoji[mini_weather_vechir]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–≤–µ—á–µ—Ä—ñ: {temperatura_vechir}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_vechir}%\n*üåô–ù—ñ—á 3:00*:\n–ë—É–¥–µ: {mini_weather_nich} {pogoda_emoji[mini_weather_nich]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω–æ—á—ñ: {temperatura_nich}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_nich}%', reply_markup=inl.mainMenuNazad, parse_mode='Markdown')

                elif query.data == 'Detail_weather_four':
                    today = datetime.date.today()
                    zavtra = today + datetime.timedelta(hours=3,days=4)
                    dt_zavtra = zavtra.strftime('%Y-%m-%d')
                    url = 'https://ua.sinoptik.ua/–ø–æ–≥–æ–¥–∞-' + city_ok + '/' + dt_zavtra
                    r = requests.get(url)
                    html = BS(r.content, 'lxml')
                    for el in html.select('#content'):
                        t_min = el.select('.temperature .min')[4].text
                        t_max = el.select('.temperature .max')[4].text
                        min_text = el.select('.weatherIco')[4]['title']
                        day_pars = el.select('.day-link')[4].text
                        month_pars = el.select('.date')[4].text
                        day_name = el.select('.month')[4].text
                        dosch_rano = el.select('tr .p2')[7].text
                        dosch_den = el.select('tr .p3')[7].text
                        dosch_vechir = el.select('tr .p4')[7].text
                        dosch_nich = el.select('tr .p1')[7].text
                        temperatura_rano = el.select('.temperature .p2')[0].text
                        temperatura_den = el.select('.temperature .p3')[0].text
                        temperatura_vechir = el.select('.temperature .p4')[0].text
                        temperatura_nich = el.select('.temperature .p1')[0].text
                        dosch_rano = dosch_rano.replace('-', '0')
                        dosch_den = dosch_den.replace('-', '0')
                        dosch_vechir = dosch_vechir.replace('-', '0')
                        dosch_nich = dosch_nich.replace('-', '0')
                        mini_weather_rano = el.select('.img .p2 .weatherIco')[0]['title']
                        mini_weather_den = el.select('.img .p3 .weatherIco')[0]['title']
                        mini_weather_vechir = el.select('.img .p4 .weatherIco')[0]['title']
                        mini_weather_nich = el.select('.img .p1 .weatherIco')[0]['title']
                        witer_rano = el.select('.gray .p2')[2].text
                        witer_den = el.select('.gray .p3')[2].text
                        witer_vechir = el.select('.gray .p4')[2].text
                        witer_nich = el.select('.gray .p1')[2].text
                        vologist_rano = el.select('tr .p2')[5].text
                        vologist_den = el.select('tr .p3')[5].text
                        vologist_vechir = el.select('tr .p4')[5].text
                        vologist_nich = el.select('tr .p1')[5].text
                        full_description = el.select('.wDescription .description')[0].text

                    await query.message.edit_text(f'üìÖ–î–∞—Ç–∞: {day_pars} | {month_pars} | {day_name}\nüìù–ú–∞–ª–µ–Ω—å–∫–∏–π –æ–ø–∏—Å: {min_text}\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –≤–µ—Å—å –¥–µ–Ω—å: {t_min} | {t_max}\n*‚òÄÔ∏è–†–∞–Ω–æ–∫ 9:00*:\n–ë—É–¥–µ: {mini_weather_rano} {pogoda_emoji[mini_weather_rano]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑—Ä–∞–Ω–∫—É: {temperatura_rano}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_rano}%\n–í—ñ—Ç–µ—Ä | {witer_rano} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_rano}%\n*üå§Ô∏è–î–µ–Ω—å 15:00*:\n–ë—É–¥–µ: {mini_weather_den} {pogoda_emoji[mini_weather_den]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–¥–µ–Ω—å: {temperatura_den}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_den}%\n–í—ñ—Ç–µ—Ä | {witer_den} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_den}%\n*‚≠ê–í–µ—á—ñ—Ä 21:00*:\n–ë—É–¥–µ: {mini_weather_vechir} {pogoda_emoji[mini_weather_vechir]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–≤–µ—á–µ—Ä—ñ: {temperatura_vechir}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_vechir}%\n–í—ñ—Ç–µ—Ä | {witer_vechir} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_vechir}%\n*üåô–ù—ñ—á 3:00*:\n–ë—É–¥–µ: {mini_weather_nich} {pogoda_emoji[mini_weather_nich]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω–æ—á—ñ: {temperatura_nich}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_nich}%\n–í—ñ—Ç–µ—Ä | {witer_nich} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_nich}%\n‚≠ê–ü–æ–≤–Ω–∏–π –æ–ø–∏—Å:\n{full_description[2:]}', reply_markup=inl.mainMenuNazad, parse_mode='Markdown')

                
                if query.data == 'Short_weather_five':
                    today = datetime.date.today()
                    zavtra = today + datetime.timedelta(hours=3,days=5)
                    dt_zavtra = zavtra.strftime('%Y-%m-%d')
                    url = 'https://ua.sinoptik.ua/–ø–æ–≥–æ–¥–∞-' + city_ok + '/' + dt_zavtra
                    r = requests.get(url)
                    html = BS(r.content, 'lxml')
                    for el in html.select('#content'):
                        t_min = el.select('.temperature .min')[5].text
                        t_max = el.select('.temperature .max')[5].text
                        min_text = el.select('.weatherIco')[5]['title']
                        day_pars = el.select('.day-link')[5].text
                        month_pars = el.select('.date')[5].text
                        day_name = el.select('.month')[5].text
                        dosch_rano = el.select('tr .p2')[7].text
                        dosch_den = el.select('tr .p3')[7].text
                        dosch_vechir = el.select('tr .p4')[7].text
                        dosch_nich = el.select('tr .p1')[7].text
                        temperatura_rano = el.select('.temperature .p2')[0].text
                        temperatura_den = el.select('.temperature .p3')[0].text
                        temperatura_vechir = el.select('.temperature .p4')[0].text
                        temperatura_nich = el.select('.temperature .p1')[0].text
                        dosch_rano = dosch_rano.replace('-', '0')
                        dosch_den = dosch_den.replace('-', '0')
                        dosch_vechir = dosch_vechir.replace('-', '0')
                        dosch_nich = dosch_nich.replace('-', '0')
                        mini_weather_rano = el.select('.img .p2 .weatherIco')[0]['title']
                        mini_weather_den = el.select('.img .p3 .weatherIco')[0]['title']
                        mini_weather_vechir = el.select('.img .p4 .weatherIco')[0]['title']
                        mini_weather_nich = el.select('.img .p1 .weatherIco')[0]['title']
                    
                    await query.message.edit_text(f'üìÖ–î–∞—Ç–∞: {day_pars} | {month_pars} | {day_name}\nüìù–ú–∞–ª–µ–Ω—å–∫–∏–π –æ–ø–∏—Å: {min_text}\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –≤–µ—Å—å –¥–µ–Ω—å: {t_min} | {t_max}\n*‚òÄÔ∏è–†–∞–Ω–æ–∫ 9:00*:\n–ë—É–¥–µ: {mini_weather_rano} {pogoda_emoji[mini_weather_rano]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑—Ä–∞–Ω–∫—É: {temperatura_rano}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_rano}%\n*üå§Ô∏è–î–µ–Ω—å 15:00*:\n–ë—É–¥–µ: {mini_weather_den} {pogoda_emoji[mini_weather_den]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–¥–µ–Ω—å: {temperatura_den}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_den}%\n*‚≠ê–í–µ—á—ñ—Ä 21:00*:\n–ë—É–¥–µ: {mini_weather_vechir} {pogoda_emoji[mini_weather_vechir]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–≤–µ—á–µ—Ä—ñ: {temperatura_vechir}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_vechir}%\n*üåô–ù—ñ—á 3:00*:\n–ë—É–¥–µ: {mini_weather_nich} {pogoda_emoji[mini_weather_nich]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω–æ—á—ñ: {temperatura_nich}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_nich}%', reply_markup=inl.mainMenuNazad, parse_mode='Markdown')

                elif query.data == 'Detail_weather_five':
                    today = datetime.date.today()
                    zavtra = today + datetime.timedelta(hours=3,days=5)
                    dt_zavtra = zavtra.strftime('%Y-%m-%d')
                    url = 'https://ua.sinoptik.ua/–ø–æ–≥–æ–¥–∞-' + city_ok + '/' + dt_zavtra
                    r = requests.get(url)
                    html = BS(r.content, 'lxml')
                    for el in html.select('#content'):
                        t_min = el.select('.temperature .min')[5].text
                        t_max = el.select('.temperature .max')[5].text
                        min_text = el.select('.weatherIco')[5]['title']
                        day_pars = el.select('.day-link')[5].text
                        month_pars = el.select('.date')[5].text
                        day_name = el.select('.month')[5].text
                        dosch_rano = el.select('tr .p2')[7].text
                        dosch_den = el.select('tr .p3')[7].text
                        dosch_vechir = el.select('tr .p4')[7].text
                        dosch_nich = el.select('tr .p1')[7].text
                        temperatura_rano = el.select('.temperature .p2')[0].text
                        temperatura_den = el.select('.temperature .p3')[0].text
                        temperatura_vechir = el.select('.temperature .p4')[0].text
                        temperatura_nich = el.select('.temperature .p1')[0].text
                        dosch_rano = dosch_rano.replace('-', '0')
                        dosch_den = dosch_den.replace('-', '0')
                        dosch_vechir = dosch_vechir.replace('-', '0')
                        dosch_nich = dosch_nich.replace('-', '0')
                        mini_weather_rano = el.select('.img .p2 .weatherIco')[0]['title']
                        mini_weather_den = el.select('.img .p3 .weatherIco')[0]['title']
                        mini_weather_vechir = el.select('.img .p4 .weatherIco')[0]['title']
                        mini_weather_nich = el.select('.img .p1 .weatherIco')[0]['title']
                        witer_rano = el.select('.gray .p2')[2].text
                        witer_den = el.select('.gray .p3')[2].text
                        witer_vechir = el.select('.gray .p4')[2].text
                        witer_nich = el.select('.gray .p1')[2].text
                        vologist_rano = el.select('tr .p2')[5].text
                        vologist_den = el.select('tr .p3')[5].text
                        vologist_vechir = el.select('tr .p4')[5].text
                        vologist_nich = el.select('tr .p1')[5].text
                        full_description = el.select('.wDescription .description')[0].text
                    
                    await query.message.edit_text(f'üìÖ–î–∞—Ç–∞: {day_pars} | {month_pars} | {day_name}\nüìù–ú–∞–ª–µ–Ω—å–∫–∏–π –æ–ø–∏—Å: {min_text}\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –≤–µ—Å—å –¥–µ–Ω—å: {t_min} | {t_max}\n*‚òÄÔ∏è–†–∞–Ω–æ–∫ 9:00*:\n–ë—É–¥–µ: {mini_weather_rano} {pogoda_emoji[mini_weather_rano]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑—Ä–∞–Ω–∫—É: {temperatura_rano}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_rano}%\n–í—ñ—Ç–µ—Ä | {witer_rano} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_rano}%\n*üå§Ô∏è–î–µ–Ω—å 15:00*:\n–ë—É–¥–µ: {mini_weather_den} {pogoda_emoji[mini_weather_den]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–¥–µ–Ω—å: {temperatura_den}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_den}%\n–í—ñ—Ç–µ—Ä | {witer_den} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_den}%\n*‚≠ê–í–µ—á—ñ—Ä 21:00*:\n–ë—É–¥–µ: {mini_weather_vechir} {pogoda_emoji[mini_weather_vechir]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–≤–µ—á–µ—Ä—ñ: {temperatura_vechir}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_vechir}%\n–í—ñ—Ç–µ—Ä | {witer_vechir} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_vechir}%\n*üåô–ù—ñ—á 3:00*:\n–ë—É–¥–µ: {mini_weather_nich} {pogoda_emoji[mini_weather_nich]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω–æ—á—ñ: {temperatura_nich}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_nich}%\n–í—ñ—Ç–µ—Ä | {witer_nich} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_nich}%\n‚≠ê–ü–æ–≤–Ω–∏–π –æ–ø–∏—Å:\n{full_description[2:]}', reply_markup=inl.mainMenuNazad, parse_mode='Markdown')

                if query.data == 'Short_weather_today':
                    url = 'https://ua.sinoptik.ua/–ø–æ–≥–æ–¥–∞-' + city_ok
                    r = requests.get(url)
                    html = BS(r.content, 'lxml')
                    for el in html.select('#content'):
                        t_min = el.select('.temperature .min')[0].text
                        t_max = el.select('.temperature .max')[0].text
                        min_text = el.select('.weatherIco')[0]['title']
                        day_pars = el.select('.day-link')[0].text
                        month_pars = el.select('.date')[0].text
                        day_name = el.select('.month')[0].text
                        zaraz = el.select('.imgBlock .today-temp')[0].text
                        dosch_rano = el.select('tr .p4')[7].text
                        dosch_den = el.select('tr .p6')[7].text
                        dosch_vechir = el.select('tr .p8')[7].text
                        dosch_nich = el.select('tr .p2')[7].text
                        dosch_rano = dosch_rano.replace('-', '0')
                        dosch_den = dosch_den.replace('-', '0')
                        dosch_vechir = dosch_vechir.replace('-', '0')
                        dosch_nich = dosch_nich.replace('-', '0')
                        temperatura_rano = el.select('.temperature .p4')[0].text
                        temperatura_den = el.select('.temperature .p6')[0].text
                        temperatura_vechir = el.select('.temperature .p8')[0].text
                        temperatura_nich = el.select('.temperature .p2')[0].text
                        mini_weather_rano = el.select('.img .p4 .weatherIco')[0]['title']
                        mini_weather_den = el.select('.img .p6 .weatherIco')[0]['title']
                        mini_weather_vechir = el.select('.img .p8 .weatherIco')[0]['title']
                        mini_weather_nich = el.select('.img .p2 .weatherIco')[0]['title']
                
                    await query.message.edit_text(f'üìÖ–î–∞—Ç–∞: {day_pars} | {month_pars} | {day_name}\nüìù–ú–∞–ª–µ–Ω—å–∫–∏–π –æ–ø–∏—Å: {min_text}\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –≤–µ—Å—å –¥–µ–Ω—å: {t_min} | {t_max}\n‚õ±Ô∏è–ó–∞—Ä–∞–∑: {zaraz}\n*‚òÄÔ∏è–†–∞–Ω–æ–∫ 9:00*:\n–ë—É–¥–µ: {mini_weather_rano} {pogoda_emoji[mini_weather_rano]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑—Ä–∞–Ω–∫—É: {temperatura_rano}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_rano}%\n*üå§Ô∏è–î–µ–Ω—å 15:00*:\n–ë—É–¥–µ: {mini_weather_den} {pogoda_emoji[mini_weather_den]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–¥–µ–Ω—å: {temperatura_den}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_den}%\n*‚≠ê–í–µ—á—ñ—Ä 21:00*:\n–ë—É–¥–µ: {mini_weather_vechir} {pogoda_emoji[mini_weather_vechir]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–≤–µ—á–µ—Ä—ñ: {temperatura_vechir}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_vechir}%\n*üåô–ù—ñ—á 3:00*:\n–ë—É–¥–µ: {mini_weather_nich} {pogoda_emoji[mini_weather_nich]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω–æ—á—ñ: {temperatura_nich}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_nich}%', reply_markup=inl.mainMenuNazad, parse_mode='Markdown')

                elif query.data == 'Detail_weather_today':
                    url = 'https://ua.sinoptik.ua/–ø–æ–≥–æ–¥–∞-' + city_ok
                    r = requests.get(url)
                    html = BS(r.content, 'lxml')
                    for el in html.select('#content'):
                        t_min = el.select('.temperature .min')[0].text
                        t_max = el.select('.temperature .max')[0].text
                        min_text = el.select('.weatherIco')[0]['title']
                        day_pars = el.select('.day-link')[0].text
                        month_pars = el.select('.date')[0].text
                        day_name = el.select('.month')[0].text
                        zaraz = el.select('.imgBlock .today-temp')[0].text
                        dosch_rano = el.select('tr .p4')[7].text
                        dosch_den = el.select('tr .p6')[7].text
                        dosch_vechir = el.select('tr .p8')[7].text
                        dosch_nich = el.select('tr .p2')[7].text
                        dosch_rano = dosch_rano.replace('-', '0')
                        dosch_den = dosch_den.replace('-', '0')
                        dosch_vechir = dosch_vechir.replace('-', '0')
                        dosch_nich = dosch_nich.replace('-', '0')
                        temperatura_rano = el.select('.temperature .p4')[0].text
                        temperatura_den = el.select('.temperature .p6')[0].text
                        temperatura_vechir = el.select('.temperature .p8')[0].text
                        temperatura_nich = el.select('.temperature .p2')[0].text
                        mini_weather_rano = el.select('.img .p4 .weatherIco')[0]['title']
                        mini_weather_den = el.select('.img .p6 .weatherIco')[0]['title']
                        mini_weather_vechir = el.select('.img .p8 .weatherIco')[0]['title']
                        mini_weather_nich = el.select('.img .p2 .weatherIco')[0]['title']
                        witer_rano = el.select('.gray .p4')[2].text
                        witer_den = el.select('.gray .p6')[2].text
                        witer_vechir = el.select('.gray .p8')[2].text
                        witer_nich = el.select('.gray .p2')[2].text
                        vologist_rano = el.select('tr .p4')[5].text
                        vologist_den = el.select('tr .p6')[5].text
                        vologist_vechir = el.select('tr .p8')[5].text
                        vologist_nich = el.select('tr .p2')[5].text
                        full_description = el.select('.wDescription .description')[0].text
                
                    await query.message.edit_text(f'üìÖ–î–∞—Ç–∞: {day_pars} | {month_pars} | {day_name}\nüìù–ú–∞–ª–µ–Ω—å–∫–∏–π –æ–ø–∏—Å: {min_text}\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –≤–µ—Å—å –¥–µ–Ω—å: {t_min} | {t_max}\n‚õ±Ô∏è–ó–∞—Ä–∞–∑: {zaraz}\n*‚òÄÔ∏è–†–∞–Ω–æ–∫ 9:00*:\n–ë—É–¥–µ: {mini_weather_rano} {pogoda_emoji[mini_weather_rano]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑—Ä–∞–Ω–∫—É: {temperatura_rano}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_rano}%\n–í—ñ—Ç–µ—Ä | {witer_rano} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_rano}%\n*üå§Ô∏è–î–µ–Ω—å 15:00*:\n–ë—É–¥–µ: {mini_weather_den} {pogoda_emoji[mini_weather_den]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–¥–µ–Ω—å: {temperatura_den}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_den}%\n–í—ñ—Ç–µ—Ä | {witer_den} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_den}%\n*‚≠ê–í–µ—á—ñ—Ä 21:00*:\n–ë—É–¥–µ: {mini_weather_vechir} {pogoda_emoji[mini_weather_vechir]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–≤–µ—á–µ—Ä—ñ: {temperatura_vechir}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_vechir}%\n–í—ñ—Ç–µ—Ä | {witer_vechir} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_vechir}%\n*üåô–ù—ñ—á 3:00*:\n–ë—É–¥–µ: {mini_weather_nich} {pogoda_emoji[mini_weather_nich]}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω–æ—á—ñ: {temperatura_nich}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_nich}%\n–í—ñ—Ç–µ—Ä | {witer_nich} –º/—Å\n–í–æ–ª–æ–≥—ñ—Å—Ç—å: {vologist_nich}%\n‚≠ê–ü–æ–≤–Ω–∏–π –æ–ø–∏—Å:\n{full_description[2:]}', reply_markup=inl.mainMenuNazad, parse_mode='Markdown')
                
                if query.data == 'Nazad_weather':
                    await query.message.edit_text(f'üë§–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á [{db.check_nick(message.from_user.id)[0]}](tg://user?id={message.from_user.id})\nüëå–í–∏–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –∑–∞ —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–≥–æ–¥—É:', reply_markup=inl.mainMenu, parse_mode='Markdown')
    
    except UnboundLocalError:
        await message.reply('–¢–∞–∫–æ–≥–æ –º—ñ—Å—Ç–∞ –Ω–µ —ñ—Å–Ω—É—î')      
    
    try:
        if '!–º—É—Ç ' in message.text in message.text:
            user_id = message.from_user.id
            if  admbd.check_adm(user_id)[0] >= 2:
                d = message.reply_to_message.from_user.id
                time_myt = int(message.text.split()[1])
                na_chto_myt = message.text.split()[2]
                owner_adm = await bot.get_chat_member(message.chat.id, d)
                owner_adm = owner_adm.status
                if owner_adm == 'administrator' or owner_adm == 'creator':
                    await message.reply('–í—ñ–Ω –∞–¥–º—ñ–Ω')
                elif message.reply_to_message.from_user.id == message.from_user.id:
                    await message.reply('–ù–µ –º–æ–∂–Ω–∞ —Å–µ–±–µ –º—É—Ç–∏—Ç–∏!')
                elif na_chto_myt == '–≥–æ–¥–∏–Ω' or na_chto_myt == '–≥–æ–¥–∏–Ω–∞':
                    full_minutes = datetime.datetime.now() + datetime.timedelta(hours=(time_myt+3))
                    fff = full_minutes.strftime('%Y-%m-%d %H:%M:%S')
                    await bot.restrict_chat_member(message.chat.id, d, types.ChatPermissions(False), datetime.datetime.now() + datetime.timedelta(hours=time_myt))
                    await message.answer(f'üë§–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á [{db.check_nick(d)[0]}](tg://user?id={d})\n‚åöÔ∏è–ü–æ–ª—É—á–∏–≤ –º—É—Ç –Ω–∞: {time_myt} {na_chto_myt}\n‚è≥–Æ–∑–µ—Ä –∑–º–æ–∂–µ –ø–∏—Å–∞—Ç–∏ –≤ {fff}', parse_mode='Markdown')
                elif na_chto_myt == '—Ö–≤–∏–ª–∏–Ω' or na_chto_myt == '—Ö–≤–∏–ª–∏–Ω–∞':
                    full_minutes = datetime.datetime.now() + datetime.timedelta(hours=3,minutes=time_myt)
                    fff = full_minutes.strftime('%Y-%m-%d %H:%M:%S')
                    await bot.restrict_chat_member(message.chat.id, d, types.ChatPermissions(False), datetime.datetime.now() + datetime.timedelta(minutes=time_myt))
                    await message.answer(f'üë§–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á [{db.check_nick(d)[0]}](tg://user?id={d})\n‚åöÔ∏è–ü–æ–ª—É—á–∏–≤ –º—É—Ç –Ω–∞: {time_myt} {na_chto_myt}\n‚è≥–Æ–∑–µ—Ä –∑–º–æ–∂–µ –ø–∏—Å–∞—Ç–∏ –≤ {fff}', parse_mode='Markdown')
                elif na_chto_myt == '–¥–Ω—ñ–≤' or na_chto_myt == '–¥–µ–Ω—å':
                    full_minutes = datetime.datetime.now() + datetime.timedelta(hours=3,days=time_myt)
                    fff = full_minutes.strftime('%Y-%m-%d %H:%M:%S')
                    await bot.restrict_chat_member(message.chat.id, d, types.ChatPermissions(False), datetime.datetime.now() + datetime.timedelta(days=time_myt))
                    await message.answer(f'üë§–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á [{db.check_nick(d)[0]}](tg://user?id={d})\n‚åöÔ∏è–ü–æ–ª—É—á–∏–≤ –º—É—Ç –Ω–∞: {time_myt} {na_chto_myt}\n‚è≥–Æ–∑–µ—Ä –∑–º–æ–∂–µ –ø–∏—Å–∞—Ç–∏ –≤ {fff}', parse_mode='Markdown')
            else:
                await message.reply('–≤ —Ç–µ–±–µ –Ω–µ–º–∞—î —Ç–∞–∫–∏—Ö –ø—Ä–∞–≤')  
        if message.text == '!—Ä–∞–∑–º—É—Ç' or message.text == '!–†–∞–∑–º—É—Ç' or message.text == '! —Ä–∞–∑–º—É—Ç' or message.text == '! –†–∞–∑–º—É—Ç':
            d = message.reply_to_message.from_user.id
            get_user_inf = await bot.get_chat_member(message.chat.id, d)
            get_user_inf = get_user_inf.can_send_messages
            if get_user_inf == False:
                await bot.restrict_chat_member(message.chat.id, d, types.ChatPermissions(True,True,True,True,True,True))
                await message.answer(f'üë§–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á [{db.check_nick(d)[0]}](tg://user?id={d})\n‚ûï–¢–µ–ø–µ—Ä –º–æ–∂–µ –≥–æ–≤–æ—Ä–∏—Ç–∏!', parse_mode='Markdown')
            else:
                await message.reply(f'üë§–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á [{db.check_nick(d)[0]}](tg://user?id={d})\n‚ûñ–ù–µ –º–∞–≤ –º—É—Ç–∞')
        
        if message.text == '!–±–∞–Ω' or message.text == '! –±–∞–Ω' or message.text == '!–ë–∞–Ω' or message.text == '! –ë–∞–Ω':
            user_id = message.from_user.id
            if  admbd.check_adm(user_id)[0] >= 3:
                d = message.reply_to_message.from_user.id
                owner_adm = await bot.get_chat_member(message.chat.id, d)
                owner_adm = owner_adm.status
                if owner_adm == 'administrator' or owner_adm == 'creator':
                    await message.reply('–í—ñ–Ω –∞–¥–º—ñ–Ω')
                elif d == message.from_user.id:
                    await message.reply('–ù–µ –º–æ–∂–Ω–∞ —Å–µ–±–µ –±–∞–Ω–∏—Ç–∏!')
                else:
                    await bot.ban_chat_member(message.chat.id, d)
                    await message.reply(f'üë§–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á [{db.check_nick(d)[0]}](tg://user?id={d})\n‚ûï–ü–æ–ª—É—á–∏–≤ –±–∞–Ω', parse_mode='Markdown')
            else:
                await message.reply('–≤ —Ç–µ–±–µ –Ω–µ–º–∞—î —Ç–∞–∫–∏—Ö –ø—Ä–∞–≤')    
        if message.text == '!—Ä–∞–∑–±–∞–Ω' or message.text == '!–†–∞–∑–±–∞–Ω' or message.text == '! —Ä–∞–∑–±–∞–Ω' or message.text == '! –†–∞–∑–±–∞–Ω':
            d = message.reply_to_message.from_user.id
            await bot.unban_chat_member(message.chat.id, d, True)
            await message.answer(f'üë§–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á [{db.check_nick(d)[0]}](tg://user?id={d})\n‚úñÔ∏è–¢–µ–ø–µ—Ä –º–æ–∂–µ –∑–∞–π—Ç–∏!', parse_mode='Markdown')

        
    except IndexError:
        await message.reply('–¢–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤—ñ–≤\n–ø—Ä–∏–∫–ª–∞–¥: –º—É—Ç 1 –≥–æ–¥–∏–Ω–∞')
    except AttributeError:
        await message.reply('—Ç—Ä–µ–±–∞ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ —é–∑–µ—Ä–∞!')
    
    try:
        if message.text == 'TEST':
            os.execv(sys.executable, [sys.executable] + sys.argv)
        if '–ê—Ä–Ω–æ–ª—å–¥ —ñ–Ω—Ñ–∞ ' in message.text or '–∞—Ä–Ω–æ–ª—å–¥ —ñ–Ω—Ñ–∞ ' in message.text:
            await message.reply(f'[ü§î](tg://user?id={message.from_user.id}) —è –¥—É–º–∞—é, —â–æ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å {random.randint(0,100)}%', parse_mode='Markdown')  
        
        if message.text == '–•—Ç–æ —è':
            #–≤–µ—Ä—Ç–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞
            my_user_id = message.from_user.id
            new_opis_check = db.check_opis(my_user_id)
            check_adm_status = admbd.check_adm(my_user_id)[0]
            if check_adm_status == 0:
                @dp.callback_query_handler(text='getCommands')
                async def weather_right(query: types.CallbackQuery):
                    await query.message.answer('‚≠ê–í–∏ –≤–º—ñ—î—Ç–µ:\n‚îú +–Ω—ñ–∫\n‚îú –î–∞—Ç–∞\n‚îú –ü–æ–≥–æ–¥–∞\n‚îú +–æ–ø–∏—Å\n‚ï∞ –ê—Ä–Ω–æ–ª—å–¥ —ñ–Ω—Ñ–∞ \n–î–ª—è –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–∞–ø–∏—à—ñ—Ç—å `–î–æ–ø–æ–º–æ–≥–∞`' , parse_mode='Markdown')
                    
                @dp.callback_query_handler(text='getOpis')
                async def weather_right(query: types.CallbackQuery):
                    await query.message.answer(f'‚≠ê–¢–≤—ñ–π –æ–ø–∏—Å: {db.check_opis(query.from_user.id)[0]}', parse_mode='Markdown')
                    
                await bot.send_message(message.chat.id, 'üë§ –ú—ñ–π –Ω—ñ–∫: ' + db.check_nick(my_user_id)[0] + f'\n\n‚≠ê–ê–¥–º—ñ–Ω–∫–∞: {check_adm_status} —Ä—ñ–≤–Ω—è\n‚åõ–†–∞–Ω–≥: –ü—Ä–æ—Å—Ç–∏–π —É—á–∞—Å–Ω–∏–∫\nüìÖ –í–ø–µ—Ä—à–µ –∑ –Ω–∞–º–∏ –ø–æ—è–≤–∏–≤—Å—è –≤: ' + db.check_datetime(my_user_id)[0], reply_markup=inl.userKeyboard)
            elif check_adm_status == 1:
                @dp.callback_query_handler(text='getCommands')
                async def weather_right(query: types.CallbackQuery):
                    await query.message.answer('‚≠ê–í–∏ –≤–º—ñ—î—Ç–µ:\n‚îú +–Ω—ñ–∫\n‚îú –î–∞—Ç–∞\n‚îú –ü–æ–≥–æ–¥–∞\n‚îú +–æ–ø–∏—Å\n‚ï∞ –ê—Ä–Ω–æ–ª—å–¥ —ñ–Ω—Ñ–∞ \n–î–ª—è –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–∞–ø–∏—à—ñ—Ç—å `–î–æ–ø–æ–º–æ–≥–∞`', parse_mode='Markdown')
                    
                @dp.callback_query_handler(text='getOpis')
                async def weather_right(query: types.CallbackQuery):
                    await query.message.answer(f'‚≠ê–¢–≤—ñ–π –æ–ø–∏—Å: {db.check_opis(query.from_user.id)[0]}', parse_mode='Markdown')
                    
                await bot.send_message(message.chat.id, 'üë§ –ú—ñ–π –Ω—ñ–∫: ' + db.check_nick(my_user_id)[0] + f'\n\n‚≠ê–ê–¥–º—ñ–Ω–∫–∞: {check_adm_status} —Ä—ñ–≤–Ω—è\n‚åõ–†–∞–Ω–≥: –ú–ª.–∞–¥–º—ñ–Ω\nüìÖ –í–ø–µ—Ä—à–µ –∑ –Ω–∞–º–∏ –ø–æ—è–≤–∏–≤—Å—è –≤: ' + db.check_datetime(my_user_id)[0], reply_markup=inl.userKeyboard)
            elif check_adm_status == 2:
                @dp.callback_query_handler(text='getCommands')
                async def weather_right(query: types.CallbackQuery):
                    await query.message.answer('‚≠ê–í–∏ –≤–º—ñ—î—Ç–µ:\n‚îú +–Ω—ñ–∫\n‚îú –î–∞—Ç–∞\n‚îú –ü–æ–≥–æ–¥–∞\n‚îú +–æ–ø–∏—Å\n‚ï∞ –ê—Ä–Ω–æ–ª—å–¥ —ñ–Ω—Ñ–∞\n–î–ª—è –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–∞–ø–∏—à—ñ—Ç—å `–î–æ–ø–æ–º–æ–≥–∞`', parse_mode='Markdown')
                    
                @dp.callback_query_handler(text='getOpis')
                async def weather_right(query: types.CallbackQuery):
                    await query.message.answer(f'‚≠ê–¢–≤—ñ–π –æ–ø–∏—Å: {db.check_opis(query.from_user.id)[0]}', parse_mode='Markdown')
                    
                await bot.send_message(message.chat.id, 'üë§ –ú—ñ–π –Ω—ñ–∫: ' + db.check_nick(my_user_id)[0] + f'\n\n‚≠ê–ê–¥–º—ñ–Ω–∫–∞: {check_adm_status} —Ä—ñ–≤–Ω—è\n‚åõ–†–∞–Ω–≥: –ì–ª.–∞–¥–º—ñ–Ω\nüìÖ –í–ø–µ—Ä—à–µ –∑ –Ω–∞–º–∏ –ø–æ—è–≤–∏–≤—Å—è –≤: ' + db.check_datetime(my_user_id)[0], reply_markup=inl.userKeyboard)
            elif check_adm_status == 3:
                @dp.callback_query_handler(text='getCommands')
                async def weather_right(query: types.CallbackQuery):
                    await query.message.answer('‚≠ê–í–∏ –≤–º—ñ—î—Ç–µ:\n‚îú +–Ω—ñ–∫\n‚îú –î–∞—Ç–∞\n‚îú –ü–æ–≥–æ–¥–∞\n‚îú +–æ–ø–∏—Å\n‚îú –ê—Ä–Ω–æ–ª—å–¥ —ñ–Ω—Ñ–∞\n‚ï∞ !–ú—É—Ç\n–î–ª—è –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–∞–ø–∏—à—ñ—Ç—å `–î–æ–ø–æ–º–æ–≥–∞`', parse_mode='Markdown')
                    
                @dp.callback_query_handler(text='getOpis')
                async def weather_right(query: types.CallbackQuery):
                    await query.message.answer(f'‚≠ê–¢–≤—ñ–π –æ–ø–∏—Å: {db.check_opis(query.from_user.id)[0]}', parse_mode='Markdown')
                    
                await bot.send_message(message.chat.id, 'üë§ –ú—ñ–π –Ω—ñ–∫: ' + db.check_nick(my_user_id)[0] + f'\n\n‚≠ê–ê–¥–º—ñ–Ω–∫–∞: {check_adm_status} —Ä—ñ–≤–Ω—è\n‚åõ–†–∞–Ω–≥: –ú–ª.–º–æ–¥–µ—Ä\nüìÖ –í–ø–µ—Ä—à–µ –∑ –Ω–∞–º–∏ –ø–æ—è–≤–∏–≤—Å—è –≤: ' + db.check_datetime(my_user_id)[0], reply_markup=inl.userKeyboard)
            elif check_adm_status == 4:
                @dp.callback_query_handler(text='getCommands')
                async def weather_right(query: types.CallbackQuery):
                    await query.message.answer('‚ï∞‚≠ê–í–∏ –≤–º—ñ—î—Ç–µ:\n‚îú +–Ω—ñ–∫\n‚îú –î–∞—Ç–∞\n‚îú –ü–æ–≥–æ–¥–∞\n‚îú +–æ–ø–∏—Å\n‚îú –ê—Ä–Ω–æ–ª—å–¥ —ñ–Ω—Ñ–∞ \n‚îú !–ú—É—Ç\n‚ï∞ !–ë–∞–Ω\n–î–ª—è –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–∞–ø–∏—à—ñ—Ç—å `–î–æ–ø–æ–º–æ–≥–∞`', parse_mode='Markdown')
                    
                @dp.callback_query_handler(text='getOpis')
                async def weather_right(query: types.CallbackQuery):
                    await query.message.answer(f'‚≠ê–¢–≤—ñ–π –æ–ø–∏—Å: {db.check_opis(query.from_user.id)[0]}', parse_mode='Markdown')
                    
                await bot.send_message(message.chat.id, 'üë§ –ú—ñ–π –Ω—ñ–∫: ' + db.check_nick(my_user_id)[0] + f'\n\n‚≠ê–ê–¥–º—ñ–Ω–∫–∞: {check_adm_status} —Ä—ñ–≤–Ω—è\n‚åõ–†–∞–Ω–≥: –ì–ª.–º–æ–¥–µ—Ä\nüìÖ –í–ø–µ—Ä—à–µ –∑ –Ω–∞–º–∏ –ø–æ—è–≤–∏–≤—Å—è –≤: ' + db.check_datetime(my_user_id)[0], reply_markup=inl.userKeyboard)
            elif check_adm_status == 5:
                @dp.callback_query_handler(text='getCommands')
                async def weather_right(query: types.CallbackQuery):
                    await query.message.answer('‚≠ê–í–∏ –≤–º—ñ—î—Ç–µ:\n‚îú +–Ω—ñ–∫\n‚îú –î–∞—Ç–∞\n‚îú –ü–æ–≥–æ–¥–∞\n‚îú +–æ–ø–∏—Å\n‚îú –ê—Ä–Ω–æ–ª—å–¥ —ñ–Ω—Ñ–∞\n‚îú !–ú—É—Ç\n‚îú !–ë–∞–Ω\n‚ï∞ –ü–æ–ª—É—á–∏—Ç–∏ –ë–î\n–î–ª—è –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–∞–ø–∏—à—ñ—Ç—å `–î–æ–ø–æ–º–æ–≥–∞`', parse_mode='Markdown')
                    
                @dp.callback_query_handler(text='getOpis')
                async def weather_right(query: types.CallbackQuery):
                    await query.message.answer(f'‚≠ê–¢–≤—ñ–π –æ–ø–∏—Å: {db.check_opis(query.from_user.id)[0]}', parse_mode='Markdown')
                    
                await bot.send_message(message.chat.id, 'üë§ –ú—ñ–π –Ω—ñ–∫: ' + db.check_nick(my_user_id)[0] + f'\n\n‚≠ê–ê–¥–º—ñ–Ω–∫–∞: {check_adm_status} —Ä—ñ–≤–Ω—è\n‚åõ–†–∞–Ω–≥: –¢–≤–æ—Ä–µ—Ü—å\nüìÖ –í–ø–µ—Ä—à–µ –∑ –Ω–∞–º–∏ –ø–æ—è–≤–∏–≤—Å—è –≤: ' + db.check_datetime(my_user_id)[0], reply_markup=inl.userKeyboard)

        if admbd.check_adm(message.from_user.id)[0] == 5 and message.text == '–ü–æ–ª—É—á–∏—Ç–∏ –ë–î':
            for i in db.full_users():
                await message.reply(f'–†—è–¥: {i[0]}\n–ê–π–¥—ñ: {i[1]}\n–Æ–∑–µ—Ä–Ω–µ–π–º: {i[2]}\n–ü–æ–ª: {i[3]}\n–ù—ñ–∫: {i[4]}\n–î–∞—Ç–∞: {i[6]}\n–°—Ç–∞—Ç—É—Å –ê–î–ú: {i[7]}\n–ú—ñ—Å—Ç–æ: {i[8]}')
            
        if message.text == '–î–æ–ø–æ–º–æ–≥–∞' or message.text == '–¥–æ–ø–æ–º–æ–≥–∞':
            #–ü–æ–∫–∞–∑—É—î –≤—Å—ñ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞
            user_id = message.from_user.id
            await message.reply(f'''
[üìí](tg://user?id={user_id})–ù–∞ –¥–∞–Ω–Ω–∏–π –º–æ–º–µ–Ω—Ç –≤ –º–µ–Ω–µ —î —Ç–∞–∫—ñ –∫–æ–º–∞–Ω–¥–∏

üëå–û—Å–Ω–æ–≤–Ω—ñ:
1) +–Ω–∏–∫ | +–Ω—ñ–∫ - –º—ñ–Ω—è—î –Ω—ñ–∫ –≤ —Å–∞–º–æ–º—É –±–æ—Ç—ñ
2) –î–∞—Ç–∞ | –ø–æ–ª—É—á–∞—î—à –¥–∞—Ç—É –∑–∞ —Ç–µ–ø–µ—Ä—ñ—à–Ω—ñ–π —á–∞—Å
3) –±–∞–Ω | –∫—ñ–∫ | –º—É—Ç - —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω–∏ –º–æ–∂—É—Ç—å —é–∑–∞—Ç–∏
4) +–∞–¥–º—ñ–Ω–∫–∞ (—Ä—ñ–≤–µ–Ω—å –∞–¥–º—ñ–Ω–∫–∏, –∑ 1-5) [–≤—ñ–¥–ø–æ–≤—ñ–≤—à–∏ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞] | –¥–∞—î –∞–¥–º—ñ–Ω–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —è–∫–æ–º—É –≤—ñ–¥–ø–æ–≤—ñ–ª–∏, –ø—Ä–∏–∫–ª–∞–¥: +–∞–¥–º—ñ–Ω–∫–∞ 3
5) –ü–æ–≥–æ–¥–∞ [–º—ñ—Å—Ç–æ] | –ø—Ä–∏–∫–ª–∞–¥: –ü–æ–≥–æ–¥–∞ –ª—å–≤—ñ–≤
6) +–æ–ø–∏—Å 
7) –ê—Ä–Ω–æ–ª—å–¥ —ñ–Ω—Ñ–∞ | –ø—Ä–∏–∫–ª–∞–¥: –ê—Ä–Ω–æ–ª—å–¥ —ñ–Ω—Ñ–∞ –º–µ–Ω—ñ –π—Ç–∏ —ó—Å—Ç–∏?
8) —Ö—Ç–æ —è | –ø–æ–ª—É—á–∏—à —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ã—é –ø—Ä–æ —Å–µ–±–µ (—Å—Ç–∞—Ç—É—Å –∞–¥–º—ñ–Ω–∫–∏ –≤ –±–æ—Ç—ñ, –Ω—ñ–∫ –≤ –±–æ—Ç—ñ, —è–∫—ñ –∫–æ–º–∞–Ω–¥–∏ —Ç–∏ –≤–º—ñ—î—à –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏)

üòä–†–ü:
1) `–¥–∞—Ç–∏ –ø—ñ–¥—Å—Ä–∞—á–Ω–∏–∫–∞`
2) `–∑—ó—Å—Ç–∏`
3) `–ø–æ–≥–ª–∞–¥–∏—Ç–∏`
4) `–ø–æ—Ü—ñ–ª—É–≤–∞—Ç–∏`
5) `–∫–æ—Ö–∞—Ç–∏—Å—è`
6) `–≤–±–∏—Ç–∏`
7) `–∫—É—Å—å`
8) `—Å–ø–∞–ª–∏—Ç–∏`
9) `—Å–∏–ª—å–Ω–æ –≤–¥–∞—Ä–∏—Ç–∏`
10) `—Ü—å–æ–º`
11) `–æ—Ç—Ä—É—ó—Ç–∏`
12) `–ø–æ–∫–æ—Ä–º–∏—Ç–∏`
''', parse_mode='Markdown')
        if '+–Ω—ñ–∫ ' in message.text or '+–Ω–∏–∫ ' in message.text:
            #–º—ñ–Ω—è—î –Ω—ñ–∫ –≤ –±–æ—Ç—ñ
            user_id = message.from_user.id
            nickname = message.text[5:]
            db.nick_user(nickname, user_id)
            new_nick_check = db.check_nick(user_id)
            await bot.send_message(message.chat.id, 'üìí–¢–≤—ñ–π –Ω–æ–≤–∏–π –Ω—ñ–∫: ' + new_nick_check[0])
        if '+–æ–ø–∏—Å ' in message.text:
            #–º—ñ–Ω—è—î –æ–ø–∏—Å –≤ –±–æ—Ç—ñ
            user_id = message.from_user.id
            nickname = message.text[6:]
            db.opis_user(nickname, user_id)
            new_opis_check = db.check_opis(user_id)
            await bot.send_message(message.chat.id, 'üìù–¢–≤—ñ–π –Ω–æ–≤–∏–π –æ–ø–∏—Å: ' + new_opis_check[0])
        if message.text == '—Ç–≤—ñ–π –∞–π–¥—ñ' or message.text == '–¢–≤—ñ–π –∞–π–¥—ñ':
            #–ø–æ–∫–∞–∑—É—î –∞–π–¥—ñ –∑–∞—Ä–µ–ø–ª–∞—è–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–∞
            youid = message.reply_to_message.from_user.id
            await bot.send_message(message.chat.id, youid)  
        if message.text.lower() == '–¥–∞—Ç–∞':
            #–ø–æ–∫–∞–∑—É—î –ª–æ–∫–∞–ª—å–Ω—É –¥–∞—Ç—É
            loc = datetime.datetime.now() + datetime.timedelta(hours=3)
            locd = loc.strftime('%H')
            locdt = loc.strftime('%M')
            week = loc.strftime('%A')
            month = loc.strftime('%B')
            chislo = loc.strftime('%d')
            fulldata = loc.strftime('%d:%m:%Y')
            await bot.send_message(message.chat.id, (f'‚åöÔ∏è –ß–∞—Å: {locd}:{locdt}\n‚è∞ –î–µ–Ω—å: {dtime.transweek(week)}\nüìÖ –î–∞—Ç–∞: {chislo} | {dtime.transmonth(month)}\n‚è≥ –§—É–ª–ª –¥–∞—Ç–∞: {fulldata}'))
        if message.text == '–ú—ñ–π –∞–π–¥—ñ' or message.text == '–º—ñ–π –∞–π–¥—ñ':
            #–í–µ—Ä—Ç–∞—î –∞–π–¥—ñ —Ç–æ–≥–æ —Ö—Ç–æ —Ç–æ –Ω–∞–ø–∏—Å–∞–≤
            await bot.send_message(message.chat.id, f'`{message.from_user.id}`', parse_mode='Markdown')
        if message.text == '–ú—ñ–π –Ω—ñ–∫' or message.text == '–º—ñ–π –Ω—ñ–∫':
            #–í–µ—Ä—Ç–∞—î –Ω—ñ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑ –±–¥ 
            user_id = message.from_user.id
            user_firstname = message.from_user.first_name
            nick_us = db.check_nick(user_id)[0]
            await message.reply(f'üë§–ù—ñ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ [{user_firstname}](tg://user?id={user_id}) ' + nick_us, parse_mode='Markdown')
        if message.text == '–¢–≤—ñ–π –Ω—ñ–∫' or message.text == '—Ç–≤—ñ–π –Ω—ñ–∫':
            #–í–µ—Ä—Ç–∞—î –Ω—ñ–∫ –∑–∞—Ä–µ–ø–ª–µ—î–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑ –±–¥ 
            user_id_reply_to = message.reply_to_message.from_user.id
            user_firstname_reply = message.reply_to_message.from_user.first_name
            user_id_reply_to_to = message.reply_to_message.from_user.id
            nick_us_reply = db.check_nick(user_id_reply_to)[0]
            await bot.send_message(message.chat.id, f'üë§–ù—ñ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ [{user_firstname_reply}](tg://user?id={user_id_reply_to_to}) ' + nick_us_reply, parse_mode='Markdown')
        if message.text == '–ê–π–¥—ñ —á–∞—Ç–∞':
            #–≤–µ—Ä—Ç–∞—î –∞–π–¥—ñ —á–∞—Ç–∞
            await message.reply(f'`{message.chat.id}`', parse_mode='Markdown')
        if message.text == '–õ–∏–≤':
            #–±–æ—Ç –ª—ñ–≤–∞—î –∑ –≥—Ä—É–ø–ø–∏
            await bot.leave_chat(message.chat.id)
        if message.reply_to_message:
            add_time = dtime.time(time.localtime())
            user_id_reply = message.reply_to_message.from_user.id
            firstname_reply = message.reply_to_message.from_user.first_name
            username_reply = message.reply_to_message.from_user.username
            if not db.check_id_bool(user_id_reply):
                db.add_to_db(user_id_reply, username_reply, firstname_reply)
                db.add_datetime(add_time, user_id_reply)
                
            if db.check_nick(user_id_reply) == None:
                db.nick_user(firstname_reply, user_id_reply)
                
            username = message.from_user.username
            user_id = message.from_user.id
            nick_first_user = db.check_nick(user_id)[0]
            b = message.from_user.id
            d = message.reply_to_message.from_user.id
            nick_two_user = db.check_nick(d)[0]
            adm_check_adm = admbd.check_adm(d)[0]
            check_adm = admbd.check_adm(message.from_user.id)[0]
            
            if message.text == '–ì–µ—Ç' or message.text == '–≥–µ—Ç':
                d = message.reply_to_message.from_user.id
                get_user_inf = await bot.get_chat_member(message.chat.id, d)
                get_user_inf = get_user_inf
                await message.reply(get_user_inf)
            if '+–∞–¥–º—ñ–Ω–∫–∞ ' in message.text:
                #–¥–∞—î –∞–¥–º—ñ–Ω–∫—É —é–∑–µ—Ä—É
                integer_for_adm_step = int(message.text[9:])
                if check_adm >= 1:
                    if adm_check_adm <= 5:
                        admbd.plus_adm(integer_for_adm_step, d)
                        await message.answer(f'üë§–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á [{nick_two_user}](tg://user?id={d})\n‚ûï–ü–æ–ª—É—á–∏–≤ –¥–æ—Å—Ç—É–ø –¥–æ –ê–¥–º—ñ–Ω–∫–∏\n‚ö™–ê–¥–º—ñ–Ω–∫–∞: {integer_for_adm_step} —Ä—ñ–≤–Ω—è', parse_mode='Markdown')
                    else:
                        await message.reply('–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –º–∞—î –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')
                else:
                    await message.reply('–í —Ç–µ–±–µ –Ω–µ–º–∞ –ø—Ä–∞–≤ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç–∞–∫–æ—ó –∫–æ–º–∞–Ω–¥–∏(')

            if message.text == '–∑—ó—Å—Ç–∏' or message.text == '–ó—ó—Å—Ç–∏':
                await bot.send_message(message.chat.id, f"üòÖüòã| [{nick_first_user}](tg://user?id={b}) –∑'—ó–≤ [{nick_two_user}](tg://user?id={d})", parse_mode='Markdown')
                  
            if message.text == "–ø–æ–≥–ª–∞–¥–∏—Ç–∏" or message.text == '–ü–æ–≥–ª–∞–¥–∏—Ç–∏':
                await bot.send_message(message.chat.id, f"ü•∫ü§≠| [{nick_first_user}](tg://user?id={b}) –ø–æ–≥–ª–∞–¥–∏–≤ [{nick_two_user}](tg://user?id={d})", parse_mode='Markdown')
            
            if message.text == "–≤–±–∏—Ç–∏" or message.text == '–í–±–∏—Ç–∏':
                await bot.send_message(message.chat.id, f"üò°üî™| [{nick_first_user}](tg://user?id={b}) –≤–±–∏–≤ [{nick_two_user}](tg://user?id={d})", parse_mode='Markdown')
                        
            if message.text == "–≤–¥–∞—Ä–∏—Ç–∏" or message.text == '–í–¥–∞—Ä–∏—Ç–∏':
                await bot.send_message(message.chat.id, f"üò°üëéüèø| [{nick_first_user}](tg://user?id={b}) –≤–¥–∞—Ä–∏–≤ [{nick_two_user}](tg://user?id={d})", parse_mode='Markdown')
                        
            if message.text == "–ø–æ—Ü—ñ–ª—É–≤–∞—Ç–∏" or message.text == '–ü–æ—Ü—ñ–ª—É–≤–∞—Ç–∏':
                await bot.send_message(message.chat.id, f"üòèüòò| [{nick_first_user}](tg://user?id={b}) –ø–æ—Ü—ñ–ª—É–≤–∞–≤ [{nick_two_user}](tg://user?id={d})", parse_mode='Markdown')
                        
            if message.text == "–∫—É—Å—å" or message.text == '–ö—É—Å—å':
                await bot.send_message(message.chat.id, f"üòã| [{nick_first_user}](tg://user?id={b}) –∫—É—Å—å–Ω—É–≤ [{nick_two_user}](tg://user?id={d})", parse_mode='Markdown')
            
            if message.text == "—Å–ø–∞–ª–∏—Ç–∏" or message.text == '–°–ø–∞–ª–∏—Ç–∏':
                await bot.send_message(message.chat.id, f"ü§¨üî•| [{nick_first_user}](tg://user?id={b}) —Å–ø–∞–ª–∏–≤ [{nick_two_user}](tg://user?id={d})", parse_mode='Markdown')
            
            if message.text == "—Å–∏–ª—å–Ω–æ –≤–¥–∞—Ä–∏—Ç–∏" or message.text == '–°–∏–ª—å–Ω–æ –≤–¥–∞—Ä–∏—Ç–∏':
                await bot.send_message(message.chat.id, f"üòàüëä| [{nick_first_user}](tg://user?id={b}) –¥—É–∂–µ —Å–∏–ª—å–Ω–æ –≤–¥–∞—Ä–∏–≤ [{nick_two_user}](tg://user?id={d})", parse_mode='Markdown')    
            
            if message.text == "–∫–æ—Ö–∞—Ç–∏—Å—è" or message.text == '–ö–æ—Ö–∞—Ç–∏—Å—è':
                await bot.send_message(message.chat.id, f"ü•µ‚ù§Ô∏è| [{nick_first_user}](tg://user?id={b}) –∂–æ—Å—Ç–∫–æ –∫–æ—Ö–∞—î—Ç—å—Å—è –∑ [{nick_two_user}](tg://user?id={d})", parse_mode='Markdown')
        
            if message.text == "—Ü—å–æ–º" or message.text == '–¶—å–æ–º':
                await bot.send_message(message.chat.id, f"üíìüå∏| [{nick_first_user}](tg://user?id={b}) –ø–æ—Ü—å–æ–º–∞–≤ [{nick_two_user}](tg://user?id={d})", parse_mode='Markdown')
                
            if message.text == '–¥–∞—Ç–∏ –ø—ñ–¥—Å—Ä–∞—á–Ω–∏–∫–∞' or message.text == '–î–∞—Ç–∏ –ø—ñ–¥—Å—Ä–∞—á–Ω–∏–∫–∞':
                await bot.send_message(message.chat.id, f"ü¶∂‚ò∫Ô∏è| [{nick_first_user}](tg://user?id={b}) –¥–∞–≤ –ø—ñ–¥—Å—Ä–∞—á–Ω–∏–∫–∞ [{nick_two_user}](tg://user?id={d})", parse_mode='Markdown')
            
            if message.text == '–æ—Ç—Ä—É—ó—Ç–∏' or message.text == '–û—Ç—Ä—É—ó—Ç–∏':
                await bot.send_message(message.chat.id, f"üß™‚ò†Ô∏è| [{nick_first_user}](tg://user?id={b}) –æ—Ç—Ä—É—ó–≤ [{nick_two_user}](tg://user?id={d})", parse_mode='Markdown')
            
            if message.text == '–ø–æ–∫–æ—Ä–º–∏—Ç–∏' or message.text == '–ü–æ–∫–æ—Ä–º–∏—Ç–∏':
                await bot.send_message(message.chat.id, f"üòãüçï| [{nick_first_user}](tg://user?id={b}) –ø–æ–∫–æ—Ä–º–∏–≤ [{nick_two_user}](tg://user?id={d})", parse_mode='Markdown')
            
    except TypeError:
        add_time = dtime.time(time.localtime())
        user_id = message.from_user.id
        username = message.from_user.username
        firstname = message.from_user.first_name
        if not db.check_id_bool(user_id):
            db.add_to_db(user_id, username, firstname)
            db.add_datetime(add_time, user_id)
        
        if db.check_nick(user_id) == None:
            db.nick_user(firstname, user_id)
    except Exception:
        await bot.send_message(5112839866,'–ü–æ–º–∏–ª–∫–∞')

            
        
    
        
if __name__ == '__main__':
    #–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
#\n–í—ñ—Ç–µ—Ä | {witer_rano} –º/—Å\n
